#!/bin/bash

# Debug script for photo replacement hang in production
# This script helps monitor logs and diagnose the issue

echo "üîç Photo Replacement Debug Script"
echo "================================="

# Check if we're in production environment
if [ "$NODE_ENV" = "production" ]; then
    echo "‚úÖ Running in production environment"
else
    echo "‚ö†Ô∏è  Not in production environment (NODE_ENV=$NODE_ENV)"
fi

echo ""
echo "üìä Environment Information:"
echo "- Node.js version: $(node --version)"
echo "- NPM version: $(npm --version)"
echo "- Current time: $(date)"
echo "- Timezone: $(date +%Z)"

echo ""
echo "üîß OpenAI API Configuration Check:"
if [ -n "$OPENAI_API_KEY" ]; then
    echo "‚úÖ OPENAI_API_KEY is set (length: ${#OPENAI_API_KEY})"
else
    echo "‚ùå OPENAI_API_KEY is not set"
fi

echo ""
echo "üìù To monitor production logs, run one of these commands:"
echo ""
echo "1. Monitor all logs:"
echo "   tail -f /var/log/your-app.log | grep -E '(üîÑ|üéØ|üîó|DEBUG)'"
echo ""
echo "2. Monitor photo replacement specifically:"
echo "   tail -f /var/log/your-app.log | grep -E '(Photo replacement|selectPhotosByAttributes|makeOpenAIRequest)'"
echo ""
echo "3. Monitor OpenAI API calls:"
echo "   tail -f /var/log/your-app.log | grep -E '(OpenAI|API request|API response)'"
echo ""
echo "4. Monitor timeouts:"
echo "   tail -f /var/log/your-app.log | grep -E '(timeout|AbortError|5 minutes)'"
echo ""
echo "üö® Common Issues to Check:"
echo ""
echo "1. OpenAI API Rate Limits:"
echo "   - Check if you're hitting rate limits in production"
echo "   - Look for 'rate limit' or '429' errors in logs"
echo ""
echo "2. Network Timeouts:"
echo "   - Check if production has different network conditions"
echo "   - Look for 'timeout' or 'AbortError' in logs"
echo ""
echo "3. Memory Issues:"
echo "   - Check if production has memory constraints"
echo "   - Look for 'out of memory' or similar errors"
echo ""
echo "4. Environment Variables:"
echo "   - Verify OPENAI_API_KEY is correctly set in production"
echo "   - Check if OPENAI_BASE_URL is different"
echo ""
echo "5. Database Connection:"
echo "   - Check if database queries are hanging"
echo "   - Look for database timeout errors"
echo ""
echo "üîç Debug Steps:"
echo ""
echo "1. Test the API endpoint directly:"
echo "   curl -X POST https://savta.ai/api/ai/magic-memory \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -H 'Authorization: Bearer YOUR_TOKEN' \\"
echo "     -d '{\"memoryBookId\":\"YOUR_BOOK_ID\",\"userId\":\"YOUR_USER_ID\",\"photoCount\":3}'"
echo ""
echo "2. Check server resources:"
echo "   - CPU usage: top -p \$(pgrep node)"
echo "   - Memory usage: free -h"
echo "   - Disk space: df -h"
echo ""
echo "3. Check network connectivity:"
echo "   - Test OpenAI API: curl -I https://api.openai.com/v1"
echo "   - Check DNS resolution: nslookup api.openai.com"
echo ""
echo "4. Monitor the specific request:"
echo "   - Look for the exact timestamp when the request starts"
echo "   - Check if it reaches the OpenAI API call"
echo "   - See if it times out or fails silently"
echo ""
echo "üìã Next Steps:"
echo "1. Deploy the updated code with enhanced logging"
echo "2. Reproduce the issue in production"
echo "3. Check the logs for the debug messages"
echo "4. Identify exactly where the hang occurs"
echo "5. Apply the appropriate fix based on the findings"
