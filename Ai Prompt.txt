Context:
You are building a POC for new features in Savta.ai, an existing Nuxt 3 + Supabase application.  
The app collects family memories (photos, stories, posts, recipes, etc.) and assembles them into memory books (PDFs for print/digital use). Target audience: Grandparents.

---

1. STACK & PROJECT CONSTRAINTS
- Nuxt 3, PrimeVue 3.x, Tailwind CSS, Supabase
- JavaScript ONLY (No TypeScript)
- Use existing code patterns for Supabase (see pages/index.vue)
- Supabase: auth, DB, storage
- Production hosting is on Vercel
- Do not touch authentication flows (login, registration, etc.)
- All new features/pages must integrate with existing layout & navigation

---

2. USER & ROLE MODEL
- States: Not logged in, Logged in, Logged in as editor/admin
- Users: regular, premium (billing out of scope)
- Admin: manage users & roles
- Editor: maintain memory book themes, assist users

---

3. FEATURE SCOPE (BUILD THESE)
ASSET UPLOAD
- Upload photos/text
- Store files in Supabase Storage
- AI auto-tags, writes captions, identifies people/objects (OpenAI via server-side Nuxt API)
- Store metadata (tags, captions, entities) in DB

MEMORY BOOK GENERATION
- Monthly/On-demand job
- Combine assets into PDFs (configurable: size, layout, quality, page count, medium)
- Notify user (notification logic: out of scope, just set status/flag in DB)

USER REVIEW & APPROVAL
- Simple UX: Users approve/reject assets & captions (no custom layouts)
- On approval: finalize PDF, mark as ready in DB

ADMIN/EDITOR INTERFACE
- Admin: CRUD + soft delete users, change roles
- Editor: manage book themes, view/support user submissions

---

4. ACCESS & MIDDLEWARE
- Only logged-in users access new features
- Admins: manage all users
- Editors: maintain themes, assist users
- Middleware must allow unauthenticated access to login, signup, confirm, landing-page

---

5. DATABASE REQUIREMENTS
- Use/update /supabase/schema.sql
- Preserve existing data; use ALTER TABLE where possible
- All tables: id, created_at, updated_at, deleted
- Add FK, indexes as needed
- All schema changes must be re-runnable
- Use reasonable triggers & RLS (see below)

KEY TABLES (extend as needed):
- profiles (user_id, email, phone, subscription_type, role)
- families (user_id, name, relationship, delivery, freq)
- memory_preferences (user_id, layout_type, page_count, print_size, quality, medium)
- assets (user_id, type, storage_url, captions, tags, people_detected, etc.)
- tags (name, many-to-many with assets)
- memory_books (user_id, status, pdf_url, review_notes, asset refs)
- activity_log (user_id, action, timestamp, details)

POLICIES:
- Row-level security only on PII tables (profiles, families, memory_preferences)
- Application logic controls access elsewhere (do NOT enable RLS on non-PII tables)
- Profile auto-create: Only in /app/confirm.vue
- Never repeat DB logic: put all reusable code in a shared library

---

6. AI TASKS (INITIAL POC)
- Tag/classify images (theme/event/emotion)
- Store classifications per asset
- Use them to group assets for publication layouts
- Generate captions (playful/meaningful, use OpenAI API)
- Identify people if labeled by user

---

7. TECHNICAL RULES
- Use only: Nuxt 3, Supabase, PrimeVue 3.x, Tailwind
- All styling: Tailwind + PrimeVue, no other UI libraries
- Supabase Storage: for all media assets
- Use .env for API/service keys
- Prioritize: functionality, code clarity, extendibility (over brevity)
- All code must be readable and SOLID
- Mock data where needed
- Track all user actions in activity_log at function/task level

---

8. DELIVERY & OUTPUT
- Implement all required code and schema changes for this MVP
- Output: full source for new/changed pages, shared lib(s), server-side API integrations, schema.sql changes, any new DB triggers
- Include seed/mock data where useful
- Comment code where logic is not obvious
- If something is unclear, make a reasoned forward-thinking assumption and document it inline

---

Bottom line:
Build a full-featured, maintainable POC for the above, integrating cleanly with the existing stack. No unfinished stubs. If you must make architectural decisions, prefer extensibility and clean separation of concerns.
