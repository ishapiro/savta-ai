
You‚Äôre building a proof of concept (POC) for new features in this existing Nuxt 3 + Supabase application called Savta.ai. This app collects family memories (photos, stories, social media posts, recipes, etc.) and assembles them into beautifully designed memory books, available as PDFs for digital and print distribution.

‚∏ª

‚úÖ EXISTING SYSTEM CONTEXT
	‚Ä¢	App built with Nuxt 3
	‚Ä¢	Hosted at http://localhost:3000/app
	‚Ä¢	Uses Supabase for database + storage + authentication
	‚Ä¢	Has a working default layout and navigation menu
	‚Ä¢	Authentication (sign in, sign up, log out) is implemented and must not be changed
	‚Ä¢	Supabase schema is defined in /supabase/schema.sql
	‚Ä¢	A working pages/index.vue is already integrated into the default layout

‚∏ª

üßë‚Äçüíª USER ROLES

Users can be in one of several states:
	‚Ä¢	Not logged in
	‚Ä¢	Logged in
	‚Ä¢	Logged in with editor or admin privileges
(Note: all admins have implied editor rights)

Additionally:
	‚Ä¢	Users can have regular or premium subscriptions
(billing system to be implemented later)

‚∏ª

üîê ACCESS RULES
	‚Ä¢	New features are only available to logged-in users
	‚Ä¢	Admins can manage all users and promote/demote roles
	‚Ä¢	Editors can maintain memory book themes and help users

‚∏ª

üß† NEW FUNCTIONALITY TO BUILD

The following features need to be implemented as new pages and added to the existing menu in the default layout:

1. Asset Upload
	‚Ä¢	Users can upload:
	‚Ä¢	Photos (stored in Supabase Storage)
	‚Ä¢	Text (stories, captions, etc.)
	‚Ä¢	Upon upload:
	‚Ä¢	AI generates tags
	‚Ä¢	AI writes a caption/description
	‚Ä¢	AI identifies people or objects in the image

2. Memory Book Generation
	‚Ä¢	Run periodically (monthly) or on demand
	‚Ä¢	Auto-generates PDF ‚Äúbooks‚Äù by combining assets:
	‚Ä¢	Configurable by size, layout, quality, page count, and medium
	‚Ä¢	A notification is sent to the user that a new memory book is ready

3. User Review & Approval
	‚Ä¢	User can:
	‚Ä¢	Approve or reject assets/captions for inclusion
	‚Ä¢	Keep the UX simple ‚Äì no custom layouts
	‚Ä¢	Upon approval:
	‚Ä¢	The PDF is finalized and marked ‚Äúready for distribution‚Äù

Note: Distribution logic (email, print, WhatsApp) is out of scope for this POC.

‚∏ª

‚öôÔ∏è ADMIN INTERFACE

Admins can:
	‚Ä¢	View, update, suspend and soft-delete users
	‚Ä¢	Promote/demote users to editor/admin

Editors can:
	‚Ä¢	Manage memory book themes
	‚Ä¢	View and support user submissions

‚∏ª

üß± DATABASE DESIGN REQUIREMENTS

Use Supabase and update /supabase/schema.sql. All schema updates must:
	‚Ä¢	Preserve existing data
	‚Ä¢	Use ALTER TABLE where applicable
	‚Ä¢	Be re-runnable
	‚Ä¢	Include reasonable triggers and Row-Level Security (RLS) policies
	‚Ä¢	Drop and recreate triggers/policies when needed

‚úÖ General Rules for Tables:
	‚Ä¢	All tables must include:
	‚Ä¢	id, created_at, updated_at, deleted (soft delete)
	‚Ä¢	Include foreign keys and indexes as needed

üì¶ Tables to Implement (add more if helpful):

profiles
	‚Ä¢	user_id, email, phone, address, subscription_type, role (user/editor/admin)

families
	‚Ä¢	id, user_id, name, relationship, contact_info, delivery_method, frequency

memory_preferences
	‚Ä¢	user_id, layout_type, page_count, print_size, quality, medium

assets
	‚Ä¢	id, user_id, type (photo, text), storage_url, user_caption, ai_caption, tags, people_detected

tags
	‚Ä¢	id, name
	‚Ä¢	Many-to-many relationship with assets

memory_books
	‚Ä¢	id, user_id, status (draft, ready, approved), pdf_url, review_notes, created_from_assets

activity_log
	‚Ä¢	id, user_id, action, timestamp, details

Track all user activity at the function/task level.

‚∏ª

üß™ TECHNICAL GUIDELINES
	‚Ä¢	Use only the technologies already in the project (Nuxt 3, Supabase, Tailwind, PrimeVue)
	‚Ä¢	Use Supabase Storage for media files
	‚Ä¢	Supabase Auth is already used for login/logout
	‚Ä¢	AI classification and captions can be done via OpenAI in NUXT service side code
    ‚Ä¢	I have API keys for all of the services in .evn
    ‚Ä¢	The production code is hosted at vercel.com

    

‚∏ª

üîß AI TASKS (for later refinement)
	‚Ä¢	Classify uploaded images by theme, event, and emotion
	‚Ä¢	Generate playful and meaningful captions
	‚Ä¢	Identify people (if labeled previously by user)
    ‚Ä¢	Generate the layouts

‚∏ª

üìå REMINDER

Do not alter or replace the login, registration, or authentication flows already implemented.

‚∏ª

ü§ñ OBJECTIVE

Create the complete code and database schema changes required to deliver this MVP, with mock data where needed. Prioritize:
	‚Ä¢	Functionality
	‚Ä¢	Simplicity
	‚Ä¢	Extendibility
	‚Ä¢	Prioritize code legibility over brevity
	‚Ä¢	Make the code SOLID






